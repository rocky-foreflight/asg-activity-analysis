#!/usr/bin/env python3

import argparse
import sys
from dataclasses import dataclass
from datetime import datetime
from datetime import time
from time import sleep

import boto3
import xlsxwriter


@dataclass(frozen=True)
class ScalingActivity:
    description: str
    cause: str
    start_time: time
    end_time: time


def write_scaling_activities(auto_scaling_group_name: str, scaling_activities: list[ScalingActivity]) -> int:
    # Create a workbook and add a worksheet.
    workbook = xlsxwriter.Workbook(
        f'{auto_scaling_group_name}_ScalingActivities_{datetime.now().strftime("%Y-%m-%d_%H-%M-%S")}.xlsx',
        {'default_date_format': 'mm/dd/yy hh:mm', 'remove_timezone': True}
    )
    worksheet = workbook.add_worksheet()

    # Add a bold format to use to highlight cells.
    bold = workbook.add_format({'bold': True})

    # Add a format to use to wrap text in cells.
    text_wrap = workbook.add_format()
    text_wrap.set_text_wrap()

    # Write some data headers.
    worksheet.write('A1', 'Description', bold)
    worksheet.write('B1', 'Cause', bold)
    worksheet.write('C1', 'Start Time', bold)
    worksheet.write('D1', 'End Time', bold)

    # Set column widths.
    worksheet.set_column('A:A', 40)
    worksheet.set_column('B:B', 100)
    worksheet.set_column('C:C', 16)
    worksheet.set_column('D:D', 16)

    # Start from the first cell below the headers.
    row = 1
    col = 0

    for activity in scaling_activities:
        worksheet.write(row, col, activity.description)
        worksheet.write(row, col + 1, activity.cause, text_wrap)
        worksheet.write_datetime(row, col + 2, activity.start_time)
        worksheet.write_datetime(row, col + 3, activity.end_time)

        row += 1

    workbook.close()

    return 0


def get_scaling_activities(auto_scaling_group_name: str) -> list[ScalingActivity]:
    client = boto3.client('autoscaling')

    response = client.describe_scaling_activities(
        AutoScalingGroupName=auto_scaling_group_name,
    )

    response_activities = response["Activities"]

    while "NextToken" in response:
        # Wait 500 milliseconds
        sleep(0.500)

        response = client.describe_scaling_activities(
            AutoScalingGroupName=auto_scaling_group_name,
            NextToken=response["NextToken"]
        )

        response_activities.extend(response["Activities"])

    activities = []

    for activity in response_activities:
        activities.append(ScalingActivity(
            activity["Description"],
            activity["Cause"],
            activity["StartTime"],
            activity["EndTime"]
        ))

    return activities


def main() -> int:
    parser = argparse.ArgumentParser(description="Retrieve ASG scaling activities and write to an Excel spreadsheet.")
    parser.add_argument("auto_scaling_group_name")
    args = parser.parse_args()

    scaling_activities = get_scaling_activities(args.auto_scaling_group_name)
    return write_scaling_activities(args.auto_scaling_group_name, scaling_activities)


if __name__ == "__main__":
    sys.exit(main())
